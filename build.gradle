apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'flyway'
apply from: 'util.gradle'

version = '1.0.0'
mainClassName = 'application.ApplicationMain'

def appName = rootProject.name
def argsProperty = 'args'

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.flywaydb:flyway-gradle-plugin:3.0'
        classpath 'org.xerial:sqlite-jdbc:3.16.1'
    }
}

flyway {
    url = 'jdbc:sqlite:data/masoes.sqlite3'
}

repositories {
    mavenCentral()
    maven {
        url 'http://jade.tilab.com/maven/'
    }
}

dependencies {
    compile 'org.apache.logging.log4j:log4j-api:2.6.2'
    compile 'org.apache.logging.log4j:log4j-core:2.6.2'
    compile 'org.apache.logging.log4j:log4j-slf4j-impl:2.6.2'
    compile 'org.slf4j:slf4j-api:1.7.21'
    compile 'commons-cli:commons-cli:1.3.1'
    compile 'com.tilab.jade:jade:4.4.0'
    compile 'com.vividsolutions:jts:1.13'
    compile 'com.miglayout:miglayout-swing:5.0'
    compile 'it.unibo.alice.tuprolog:tuprolog:3.2'
    compile 'org.xerial:sqlite-jdbc:3.16.1'
    compile 'org.reflections:reflections:0.9.10'
    compile 'org.flywaydb:flyway-gradle-plugin:3.0'
    testCompile 'junit:junit:4.12'
    testCompile 'org.hamcrest:hamcrest-library:1.3'
    testCompile 'org.mockito:mockito-core:1.10.19'
    testCompile 'org.unitils:unitils-core:3.4.2'
    testCompile 'com.github.stefanbirkner:system-rules:1.16.0'
    testCompile 'org.powermock:powermock-api-mockito:1.6.5'
    testCompile 'org.powermock:powermock-module-junit4:1.6.5'
}

processResources {
    filesMatching('**application.properties') {
        expand('appName': appName, 'appVersion': version, 'appRevision': gitRevision())
    }
}

jar {
    manifest {
        attributes('Implementation-Title': appName, 'Implementation-Version': version, 'Implementation-Revision': gitRevision())
    }
}

run {
    main = mainClassName
    if (project.hasProperty(argsProperty)) {
        args(processArguments(project.property(argsProperty)))
    }
}

task unitTest(type: Test) {
    exclude '**/*FunctionalTest*'
}

task functionalTest(type: Test) {
    include '**/*FunctionalTest*'
}

tasks.withType(Test) {
    testLogging {
        showExceptions true
        showCauses true
        showStackTraces true
        exceptionFormat 'full'
        events 'passed', 'skipped', 'failed'
    }
}
